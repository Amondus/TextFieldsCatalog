/* 
  Localizable.strings
  TextFieldsCatalog

  Created by Александр Чаусов on 23/01/2019.
  Copyright © 2019 Александр Чаусов. All rights reserved.
*/

// MARK: - Button

"Button.changePreset" = "Изменить пресет";
"Button.reset" = "Сбросить";

// MARK: - Constants

// MARK: Sex
"Constants.Sex.male" = "Мужской";
"Constants.Sex.female" = "Женский";

// MARK: - MainTab
"Constants.MainTab.catalog" = "Каталог";
"Constants.MainTab.example" = "Примеры";
"Constants.MainTab.info" = "Инфо";

// MARK: - TextFieldType

"TextFieldType.Box.title" = "Поле ввода с обводкой";
"TextFieldType.Box.description" = "• Границы поля ввода скруглены и подсвечены.\n• Имеется плейсхолдер над полем ввода.\n• Информационное-сообщение или сообщение об ошибке внизу, в одну строку.\n• Кастомизируется под ввод пароля.\n• Поддержка валидаторов и форматтеров.";
"TextFieldType.Underlined.title" = "Подчеркнутое поле ввода";
"TextFieldType.Underlined.description" = "• Под полем ввода присутствует линия.\n• Плейсхолдер выполнен как CATextLayer, что позволяет анимационно изменять его кегль, цвет и позицию при переходе между состояниями.\n• Кастомизируется под ввод пароля.\n• Информационное-сообщение или сообщение об ошибке внизу, в одну строку.\n• Поддержка валидаторов и форматтеров.";
"TextFieldType.CustomUnderlined.title" = "Кастомизированое поле ввода с подчеркивание";
"TextFieldType.CustomUnderlined.description" = "• То же самое, что и поле ввода с подчеркиванием, но кастомизированное.\n• Отсутствует лейбл с подсказкой/ошибкой.";
"TextFieldType.UnderlinedTextView.title" = "UITextView с подчеркиванием";
"TextFieldType.UnderlinedTextView.description" = "• По дизайну - то же самое, что и просто подчеркнутое поле ввода.\n• Имеет практически все его возможности, за некоторым исключением (нет тех методов, которые данному полю в принципе не нужны).\n• В основном используется для полей ввода комментариев - то есть в тех местах, где текст будет явно превышать одну строку. Именно по этому данное поле - пока что единственная в этой библиотеке обертка именно над UITextView, а не UITextField\n• Имеется возможность показа/скрытия кнопки очистки содержимого.";

// MARK: - Presets

// MARK: Password
"Presets.password.name" = "Пароль";
"Presets.password.description" = "Пример кастомизации и работы поля для ввода пароля.\n\n• Максимальная длина пароля - 20 символов (возможно сделать более изящное решение, изменив маску, что приведет к тому, что пользователь не введет более 20 символов в принципе).\n• Задана маска, которая не позволяет вводить пробелы и переносы строки.\n• Запрещена вставка символов.\n• Задано регулярное выражение: корректный пароль состоит из не менее 8 символов, букв латинского алфавита, хотя бы одной маленькой, одной большой буквы и одной цифры.\n\nВажная особенность: rightView у внутреннего текстфилда отсутствует, чтобы предотвратить наложение иконки с глазом поверх стрелки в режиме caps lock.\n\nЕще одна особенность: добавлен код, предотвращающий полное удаление содержимого при повторном вводе в поле ввода (дефолтное поведение, связанное с secureMode).";
"Presets.password.placeholder" = "Пароль";
"Presets.password.hint" = "Пароль должен содержать буквы латинского алфавита, хотя бы одну маленькую, одну большую буквы и быть длинною не менее 8 символов";
"Presets.password.shortHint" = "Текст возможной подсказки";
"Presets.password.shortErrorText" = "Пароль слишком короткий";
"Presets.password.largeErrorText" = "Пароль должен содержать не более %@ символов";

// MARK: Name
"Presets.name.name" = "Имя";
"Presets.name.description" = "Пример поля ввода, в котором установлена маска с кастомной нотацией.\n\n• Поле имеет возможность установить маску для ввода, к примеру маску номера телефона, но есть и еще одна возможность использования: можно создать свою кастомную нотацию для маски (в частности, здесь применена кастомная нотация, где в маске символом R обозначается символ, соответствующий букве русского алфавита и пробелу).\n• Таким образом, в это поле нельзя ввести ничего, кроме пробела и букв русского алфавита.\n• В качестве приятного бонуса - пример, как можно обрезать пробелы в начале и конце строки при стнятии фокуса.";
"Presets.name.placeholder" = "Имя";
"Presets.name.hint" = "Используйте только русские буквы";
"Presets.name.notValidError" = "Используйте только русские буквы";
"Presets.name.largeTextError" = "Имя должно быть не более 20 символов";

// MARK: Email
"Presets.email.name" = "Email";
"Presets.email.description" = "Пример работы поля для случая ввода email-адреса.\n\n• Для корректной работы достаточно только изменить тип клавиатуры и задать валидатор, не позволяющий оставлять поле пустым и содержащий регулярное выражение.";
"Presets.email.placeholder" = "Email";

// MARK: Phone
"Presets.phone.name" = "Номер телефона";
"Presets.phone.description" = "Пример работы поля для случая ввода номера телефона.\n\n• Отличный пример совместного использования валидатора и форматтера. Форматтер позволяет задать маску под номер телефона, валидатор же проверяет на полноту его ввода.\n\nВ данном кейсе представлен пример ввода телефона в российском формате.";
"Presets.phone.placeholder" = "Номер телефона";
"Presets.phone.errorMessage" = "Номер телефона должен содержать 10 цифр";

// MARK: CardExpirationDate
"Presets.cardExpirationDate.name" = "Срок действия карты";
"Presets.cardExpirationDate.description" = "Пример работы поля для случая ввода срока действия карты.\n\n• Для соответствия содержимого корректному формату - используется форматтер с определенной маской.";
"Presets.cardExpirationDate.placeholder" = "Срок действия карты";
"Presets.cardExpirationDate.errorMessage" = "Введите месяц и год окончания срока действия";

// MARK: Cvc
"Presets.cvc.name" = "CVC-код";
"Presets.cvc.description" = "Пример работы поля для случая ввода срока действия карты.\n\n• Для соответствия содержимого корректному формату - используется форматтер с определенной маской, вставка текста разрешена.\n• При этом возможно применение обычного валидатора, в котором необходимо задать минимальную и максимальную длину содержимого равной трем, установить соответствующий тип клавиатуры и запретить вставку в поле ввода.";
"Presets.cvc.placeholder" = "CVC";
"Presets.cvc.errorMessage" = "CVC-код должен содержать 3 цифры";

// MARK: CardNumber
"Presets.cardNumber.name" = "Номер карты";
"Presets.cardNumber.description" = "Пример работы поля для случая ввода номера карты.\n\n• Для соответствия содержимого корректному формату - используется форматтер с определенной маской, вставка текста разрешена.\n• Маска поддерживает номера карт от 16 до 19 символов (как пример того, как можно настроить поле для ввода форматированного текста с длиной из некоторого диапазона)";
"Presets.cardNumber.placeholder" = "Номер карты";
"Presets.cardNumber.errorMessage" = "Введите правильно номер Вашей карты";

// MARK: QrCode
"Presets.qrCode.name" = "QR-код";
"Presets.qrCode.description" = "Пример работы поля с кастомной кнопкой справа.\n\n• Контент для кнопки устанавливается вместе с модом самого текстового поля (метод setTextFieldMode).\n• Есть возможность указать необходимую иконку для кнопки, а также ее цвет в нормальном состоянии и состояниях highlighted/selected";
"Presets.qrCode.placeholder" = "Введите QR-код";
"Presets.qrCode.hint" = "Можно считать QR-код с помощью камеры";

// MARK: Birthday
"Presets.birthday.name" = "Дата";
"Presets.birthday.description" = "Пример работы поля для ввода какой либо даты. К примеру, даты рождения. Особенность состоит в том, что для ввода даты используется UIDatePicker.\n\n• Для корректной работы поля необходимо создать кастомное inputView, предоставляемое библиотекой, указав его размер, поле ввода, к которому оно будет относится, а также dateFormat (который по умолчанию установлен в dd.MM.yyyy).\n• При смене даты - текст в поле ввода будет меняться автоматически, в соответствии с установленным dateFormat, а саму дату можно получить, реализовав замыкание onDateChanged.\n• Toolbar кастомизируется, можно поменять текст 'return' кнопки, цвет кнопок, цвет бэкграунда, цвет сепараторов.\n• При установке previous/next input в полях ввода - в тулбаре автоматически появятся кнопки для навигации между полями. При этом создавать inputView необходимо до установки этих значений.\n• Имеется доступ к UIDatePicker, а соответственно, и его настройкам.";
"Presets.birthday.placeholder" = "Дата рождения";
"Presets.birthday.hint" = "Вы должны выбрать дату своего рождения";

// MARK: Sex
"Presets.sex.name" = "Пол";
"Presets.sex.description" = "Пример работы поля для выбора какого-то значения из заранее заготовленного списка. Для более простого выбора используется барабан (UIPickerView).\n\n• Для корректной работы поля необходимо создать кастомное inputView, предоставляемое библиотекой, указав его размер, поле ввода, к которому оно будет относится, а также передать список необходимых к отображению значений.\n• При смене значения - текст в поле ввода будет меняться автоматически.\n• Toolbar кастомизируется, можно поменять текст 'return' кнопки, цвет кнопок, цвет бэкграунда, цвет сепараторов.\n• При установке previous/next input в полях ввода - в тулбаре автоматически появятся кнопки для навигации между полями. При этом создавать inputView необходимо до установки этих значений.";
"Presets.sex.placeholder" = "Пол";
"Presets.sex.hint" = "Вы должны определиться со своим полом";

// MARK: Comment
"Presets.comment.name" = "Комментарий";
"Presets.comment.description" = "Пример работы поля в случае ввода какого-либо комментария, в данном случае - комментария к доставке.\n\n• Имеется возможность скрыть кнопку очистки содержимого.\n• Есть возможность полностью кастомизировать поле.";
"Presets.comment.placeholder" = "Комментарий к доставке";
"Presets.comment.hint" = "Пожалуйста, поделитесь с нами Вашим мнением";
"Presets.comment.errorMessage" = "Оставьте развернутый комментарий к доставке, он должен быть не менее 30 символов";

// MARK: - Flows

// MARK: - Main

// MARK: - Main
"Main.Main.title" = "Каталог";

// MARK: Info
"Main.Info.description" = "Данный проект содержит каталог полей ввода, большая часть из которых имеет одинаковый API для взаимодействия с ними. Наличие встроенных валидаторов и форматтеров позволяет широко кастомизировать поведение полей ввода для различных целей: пароль, email, номер телефона и т.п. Более подробно ознакомиться с полями на деле можно открыв экран с примером и посмотреть работу в различных конфигурациях, часть которых из наиболее часто используемых уже включена в проект.\n\n• Если вам необходимо посмотреть на исходный код полей - он находится в дирректории TextFieldsCatalog/TextFields/TextFields.\n• Если вам необходимо посмотреть на исходный код настройки полей в различных конфигурациях - он находится в каталоге TextFieldsCatalog/TextFields/Types and presets/Presets.\n• Если вы - разработчик, и вы хотите добавить новое поле в данный каталог - то необходимо добавить исходный код своего поля ввода в соответствующую дирректорию, добавить новое значение в enum TextFieldType, реализовать свой файл с пресетами и поправить все возникшие ошибки, решение которых приведет к тому, что ваше поле ввода появится в каталоге.";
